@page "/unidade-medida-cadastro"
@page "/unidade-medida-cadastro/{Id:long}"
@inject GpdFrontEnd.Services.System.HttpService httpService
@inject NotificationService notificationService
@inject NavigationManager navigation
@inject IJSRuntime js
@using System.Text.Json;

<nav class="navbar navbar-default navbar-fixed-top" style="height:56px; background-image: linear-gradient(180deg, #b0d2f7 100%, #007bff 0%); justify-content:center">
    <button @onclick="SalvarAsync" class="btn btn-success" style="width:120px; border-radius:0px"><span class="oi oi-circle-check"></span> Salvar</button>
    &nbsp;&nbsp;
    <button class="btn btn-default" @onclick="Cancelar" style="width:120px; border-radius:0px; border: 1px solid black; background-color:white"><span class="oi oi-circle-x"></span> Cancelar</button>
    &nbsp;&nbsp;
    <button hidden="@(!Id.HasValue)" class="btn btn-danger" @onclick="ExcluirAsync"><span class="oi oi-trash"></span> Excluir</button>
</nav>

<div class="card">
    <div class="card-header"><h5>Formulário de cadastro de unidade de medida (modo: @(Id.HasValue ? "visualização/edição" : "inserção"))</h5></div>
    <div class="card-body">

        <div class="row">
            <div class="col-md-2">
                <Text @ref="TxSigla" Label="Sigla" PlaceHolder="insira a sigla" MaxLength="10" Required="true" Value="@unidadeMedidaCadastro.Sigla"/>
            </div>
            <div class="col-md-10">
                <Text @ref="TxDescricao" Label="Descrição" PlaceHolder="insira a descrição" MaxLength="255" Required="true" Value="@unidadeMedidaCadastro.Descricao"/>
            </div>
        </div>

    </div>
</div>

<Loader Visible="loaderVisible"/>

@code
{
    [Parameter]
    public long? Id { get; set; }

    private UnidadeMedida unidadeMedidaCadastro;
    private bool loaderVisible;

    protected override void OnInitialized()
    {
        unidadeMedidaCadastro = new UnidadeMedida();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender)
        {
            if (Id.HasValue)
            {
                var http = await httpService.GetHttpAsync();
                if (http != null)
                {
                    SetVisibleLoader(true);
                    try
                    {
                        var response = await http.GetAsync($"unidade-medida/id/{Id}");
                        var content = await response.Content.ReadAsStringAsync();
                        unidadeMedidaCadastro = JsonSerializer.Deserialize<UnidadeMedida>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    }
                    catch (Exception exc)
                    {
                        Console.WriteLine(exc.Message);
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao carregar o registro.", Duration = 7000 });
                    }
                    SetVisibleLoader(false);
                }
            }
        }
    }

    private async Task ExcluirAsync()
    {
        var result = await js.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este registro.");
        if (result == true)
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                SetVisibleLoader(true);
                try
                {
                    var response = await http.DeleteAsync($"unidade-medida?id={Id}");
                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }

                    Cancelar();
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Registro excluído com sucesso.", Duration = 5000 });
                }
                catch (Exception exc)
                {
                    Console.WriteLine(exc.Message);
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao excluir o registro.\nVerifique se este registro possui dependências.", Duration = 7000 });
                }
                SetVisibleLoader(false);
            }
        } 
    }

    private void Cancelar()
    {
        navigation.NavigateTo("/unidade-medida-consulta");
    }

    private async Task SalvarAsync()
    {
        bool formularioValido = TxSigla.Valid && TxDescricao.Valid;
        if (formularioValido)
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                SetVisibleLoader(true);
                try
                {
                    HttpResponseMessage response; 
                    unidadeMedidaCadastro.Id = Id;
                    unidadeMedidaCadastro.Sigla = TxSigla.GetValue();
                    unidadeMedidaCadastro.Descricao = TxDescricao.GetValue();
                    string message;
                    if (unidadeMedidaCadastro.Id.HasValue)
                    {
                        response = await http.PutAsJsonAsync("unidade-medida", unidadeMedidaCadastro);
                        message = "Registro atualizado com sucesso";
                    }
                    else
                    {
                        response = await http.PostAsJsonAsync("unidade-medida", unidadeMedidaCadastro);
                        message = "Registro inserido com sucesso.";
                    }

                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }
                    else if (!Id.HasValue)
                    {
                        Id = long.Parse(response.Content.ReadAsStringAsync().Result);
                    }

                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = message, Duration = 6000 });
                }
                catch (Exception exc)
                {
                    Console.WriteLine(exc.Message);
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao salvar os dados.", Duration = 5000 });
                }
                SetVisibleLoader(false);
            }
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Alerta", Detail = "Existem campos que precisam ser informados ou corrigidos", Duration = 5000 });
        }
    }

    private void SetVisibleLoader(bool visible)
    {
        loaderVisible = visible;
        StateHasChanged();
    }

    private Text TxSigla;
    private Text TxDescricao;

    public class UnidadeMedida
    {
        public long? Id {get; set;}
        public string Sigla {get; set;}
        public string Descricao {get; set;}
    }
}