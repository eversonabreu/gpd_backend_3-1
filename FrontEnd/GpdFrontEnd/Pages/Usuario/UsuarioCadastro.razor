@page "/usuario-cadastro"
@page "/usuario-cadastro/{Id:long}"
@inject GpdFrontEnd.Services.System.HttpService httpService
@inject NotificationService notificationService
@inject NavigationManager navigation
@inject IJSRuntime js
@using System.Text.Json;

<nav class="navbar navbar-default navbar-fixed-top" style="height:56px; background-image: linear-gradient(180deg, #b0d2f7 100%, #007bff 0%); justify-content:center">
    <button @onclick="SalvarAsync" class="btn btn-success" style="width:120px; border-radius:0px"><span class="oi oi-circle-check"></span> Salvar</button>
    &nbsp;&nbsp;
    <button class="btn btn-default" @onclick="Cancelar" style="width:120px; border-radius:0px; border: 1px solid black; background-color:white"><span class="oi oi-circle-x"></span> Cancelar</button>
    &nbsp;&nbsp;
    <button hidden="@(!Id.HasValue)" class="btn btn-danger" @onclick="ExcluirAsync"><span class="oi oi-trash"></span> Excluir</button>
</nav>

<div class="card">
    <div class="card-header"><h5>Formulário de cadastro de usuário (modo: @(Id.HasValue ? "visualização/edição" : "inserção"))</h5></div>
    <div class="card-body">

        <div class="row">
            <div class="col-md-4">
                <Text @ref="TxNome" Label="Nome" PlaceHolder="insira o nome do usuário" MaxLength="255" Required="true" Value="@usuarioCadastro.Nome"/>
            </div>
            <div class="col-md-4">
                <TextCPF @ref="TxCPF" Required="true" Value="@usuarioCadastro.Cpf"/>
            </div>
            <div class="col-md-4">
                <TextEmail @ref="TxEmail" Required="true" Value="@usuarioCadastro.Email" Label="E-mail" PlaceHolder="insira o nome o e-mail" MaxLength="150"/>
            </div>
        </div>

        <div class="row">
            <div class="col-md-3">
                <TextValue @ref="TxValorPesoCorporativo" Required="true" PlaceHolder="Insira o valor do peso corporativo" Value="@usuarioCadastro.ValorPesoCorporativo" AllowNegative="false" AllowClearValue="true" MinValue="0m" Label="Peso corporativo"/>
            </div>
            <div class="col-md-3">
                <TextValue @ref="TxValorPesoIndividual" Required="true" PlaceHolder="Insira o valor do peso individual" Value="@usuarioCadastro.ValorPesoIndividual" AllowNegative="false" AllowClearValue="true" MinValue="0m" Label="Peso individual"/>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                <label>Administrador</label>
                    <div class="input-group">
                        <select class="form-control" @onchange="@(obj => usuarioCadastro.Administrador = Convert.ToBoolean(obj.Value))">
                            @if (usuarioCadastro.Administrador)
                            {
                                <option value="true">Sim</option>
                                <option value="false">Não</option>
                            }
                            else
                            {
                                <option value="false">Não</option>
                                <option value="true">Sim</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                <label>Ativo</label>
                    <div class="input-group">
                        <select class="form-control" @onchange="@(obj => usuarioCadastro.Ativo = Convert.ToBoolean(obj.Value))">
                            @if (usuarioCadastro.Ativo)
                            {
                                <option value="true">Sim</option>
                                <option value="false">Não</option>
                            }
                            else
                            {
                                <option value="false">Não</option>
                                <option value="true">Sim</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<Loader Visible="loaderVisible"/>

@code
{
    [Parameter]
    public long? Id { get; set; }

    private Usuario usuarioCadastro;
    private bool loaderVisible;

    protected override void OnInitialized()
    {
        usuarioCadastro = new Usuario();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender)
        {
            if (Id.HasValue)
            {
                var http = await httpService.GetHttpAsync();
                if (http != null)
                {
                    SetVisibleLoader(true);
                    try
                    {
                        var response = await http.GetAsync($"usuario/id/{Id}");
                        var content = await response.Content.ReadAsStringAsync();
                        usuarioCadastro = JsonSerializer.Deserialize<Usuario>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    }
                    catch (Exception exc)
                    {
                        Console.WriteLine(exc.Message);
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao carregar o registro.", Duration = 7000 });
                    }
                    SetVisibleLoader(false);
                }
            }
        }
    }

    private async Task ExcluirAsync()
    {
        var result = await js.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este usuário.");
        if (result == true)
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                SetVisibleLoader(true);
                try
                {
                    var response = await http.DeleteAsync($"usuario?id={Id}");
                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }

                    Cancelar();
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Registro excluído com sucesso.", Duration = 5000 });
                }
                catch (Exception exc)
                {
                    Console.WriteLine(exc.Message);
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao excluir o registro.\nVerifique se este registro possui dependências.", Duration = 7000 });
                }
                SetVisibleLoader(false);
            }
        } 
    }

    private void Cancelar()
    {
        navigation.NavigateTo("/usuario-consulta");
    }

    private async Task SalvarAsync()
    {
        bool formularioValido = TxNome.Valid && TxCPF.Valid && TxEmail.Valid && TxValorPesoCorporativo.Valid && TxValorPesoIndividual.Valid;
        if (formularioValido)
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                SetVisibleLoader(true);
                try
                {
                    HttpResponseMessage response; 
                    usuarioCadastro.Id = Id;
                    usuarioCadastro.Nome = TxNome.GetValue();
                    usuarioCadastro.Cpf = TxCPF.GetValue();
                    usuarioCadastro.Email = TxEmail.GetValue();
                    usuarioCadastro.ValorPesoCorporativo = TxValorPesoCorporativo.GetValue();
                    usuarioCadastro.ValorPesoIndividual = TxValorPesoIndividual.GetValue();
                    string message;
                    if (usuarioCadastro.Id.HasValue)
                    {
                        response = await http.PutAsJsonAsync("usuario", usuarioCadastro);
                        message = "Usuário atualizado com sucesso";
                    }
                    else
                    {
                        response = await http.PostAsJsonAsync("usuario", usuarioCadastro);
                        message = "Usuário inserido com sucesso.\nUm e-mail foi enviado ao usuário com a sua senha temporária.";
                        Id = long.Parse(response.Content.ReadAsStringAsync().Result);
                    }

                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }

                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = message, Duration = 6000 });
                }
                catch (Exception exc)
                {
                    Console.WriteLine(exc.Message);

                    if (exc.Message.Contains("UkUsuario"))
                    {
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Erro", Detail = "O CPF informado já está sendo utilizado por outro usuário.", Duration = 5000 });
                    }
                    else
                    {
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao salvar os dados.", Duration = 5000 });    
                    }
                }
                SetVisibleLoader(false);
            }
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Alerta", Detail = "Existem campos que precisam ser informados ou corrigidos", Duration = 5000 });
        }
    }

    private void SetVisibleLoader(bool visible)
    {
        loaderVisible = visible;
        StateHasChanged();
    }

    private Text TxNome;
    private TextCPF TxCPF;
    private TextEmail TxEmail;
    private TextValue TxValorPesoCorporativo;
    private TextValue TxValorPesoIndividual;

    public class Usuario
    {
        public long? Id {get; set;}
        public string Nome {get; set;}
        public string Cpf {get; set;}
        public string Email {get; set;}
        public decimal ValorPesoCorporativo {get; set;}
        public decimal ValorPesoIndividual {get; set;}
        public bool Administrador {get; set;}
        public bool Ativo {get; set;}
    }
}