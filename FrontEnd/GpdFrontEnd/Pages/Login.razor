@layout DefaultLayout
@page "/login"
@page "/login/{Text}"
@inject NavigationManager nav
@inject IJSRuntime jsRuntime
@inject GpdFrontEnd.Infraestructure.Session session
@inject HttpClient http

<style>
    .container {
        height: 100%;
        align-content: center;
    }

    .card {
        height: 370px;
        margin-top: auto;
        margin-bottom: auto;
        width: 400px;
        background-color: rgba(0,0,0,0.5) !important;
    }

    .social_icon span {
        font-size: 60px;
        margin-left: 10px;
        color: #FFC312;
    }

    .social_icon span:hover {
        color: white;
        cursor: pointer;
    }

    .card-header h5 {
        color: white;
    }

    .social_icon {
        position: absolute;
        right: 20px;
        top: -45px;
    }

    .input-group-prepend span {
        width: 50px;
        background-color: #FFC312;
        color: black;
        border: 0 !important;
    }

    input:focus {
        outline: 0 0 0 0 !important;
        box-shadow: 0 0 0 0 !important;
    }

    .remember {
        color: white;
    }

    .remember input {
        width: 20px;
        height: 20px;
        margin-left: 15px;
        margin-right: 5px;
    }

    .login_btn {
        color: black;
        background-color: #FFC312;
        width: 100px;
    }

    .login_btn:hover {
        color: black;
        background-color: white;
    }

    .links {
        color: white;
    }

    .links a {
        margin-left: 4px;
    }
</style>

<div class="container" style="margin-top:50px">
    <div class="d-flex justify-content-center h-100">
        <div class="card">
            <div class="card-header">
                <h5>GPD - Gerenciamento pelas diretrizes</h5>
                <div class="d-flex justify-content-end social_icon">
                    <span><i class="fab fa-facebook-square"></i></span>
                    <span><i class="fab fa-google-plus-square"></i></span>
                    <span><i class="fab fa-twitter-square"></i></span>
                </div>
            </div>
            <div class="card-body">
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="oi oi-account-login"></i></span>
                        </div>
                        <input id="cpfLogin" autofocus type="text" @bind="cpf" class="form-control" placeholder="Digite seu CPF" maxlength="11" oninput="mascaraCpf(this)" onpaste="return false" />

                    </div>
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="oi oi-key"></i></span>
                        </div>
                        <input @onkeydown="KeyDown" type="password" @bind-value="password" @bind-value:event="oninput" class="form-control" placeholder="Digite sua senha" />
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn float-right login_btn" @onclick="EntrarAsync" disabled="@(GetCpf().Length != 11 || string.IsNullOrEmpty(password) || password.Length < 4)">Entrar</button>
                    </div>

                    <div class="row" hidden="@(!usuarioSenhaIncorreto)">
                        <small style="color:white">Usuário ou senha incorretos</small>
                    </div>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-center">
                    <a href="#">Esqueceu sua senha?</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string Text { get; set; }

    private string cpf;
    private string password;
    private bool usuarioSenhaIncorreto;

    private string GetCpf()
    {
        if ((cpf?.Trim().Length ?? 0) == 14)
        {
            return cpf.Trim().Replace(".", string.Empty).Replace("-", string.Empty);
        }

        return string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("focus", "cpfLogin");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Text))
        {
            nav.NavigateTo("login/account", true);
        }

        await base.OnInitializedAsync();
    }

    private async Task KeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await EntrarAsync();
        }
    }

    private async Task EntrarAsync()
    {
        try
        {
            usuarioSenhaIncorreto = false;
            StateHasChanged();
            var login = new GPD.Commom.UserInformations.Login
            {
                LoginValue = GetCpf(),
                Password = password
            };

            string json = System.Text.Json.JsonSerializer.Serialize(login);
            json = GPD.Commom.Utils.Cryptography.Encrypt(json);
            http.DefaultRequestHeaders.Clear();
            http.DefaultRequestHeaders.Add("Authorization", $"Bearer {json}");

            var result = await http.PostAsync("usuario/login-account", null);
            string token = result.Content.ReadAsStringAsync().Result;

            if (token.Contains("401 - "))
            {
                throw new Exception(token);
            }

            session.SetTokenAsync(token);

            await jsRuntime.InvokeVoidAsync("removeShowLogin");
            nav.NavigateTo("/");
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
            usuarioSenhaIncorreto = true;
            StateHasChanged();
        }
    }
}