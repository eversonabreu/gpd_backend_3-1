@page "/projeto-estrutura-organizacional"
@using GpdFrontEnd.Components.Lookups.Projeto
@using GpdFrontEnd.Components.Lookups.NivelOrganizacional
@using GpdFrontEnd.Components.Lookups.Indicador
@using GpdFrontEnd.Components.Lookups.Usuario
@inject GpdFrontEnd.Services.System.HttpService httpService
@inject NotificationService notificationService
@inject IJSRuntime js
@inject NavigationManager navigation

<div style="width:auto; height:65px; background-color:white; border-bottom: 1px solid #007bff">
    <div class="row" style="margin-left: 0px; margin-right: 0px">
        <div class="col-md-3">
            <ProjetoLookup @ref="lkpProjeto" Label="Projeto" PlaceHolder="Selecione um projeto" OnChange="ChangeProjectAsync"/>
        </div>
        @if (lkpProjeto?.GetValueOrNull() != null && ArvoreSelected != null)
        {
            <div class="col-md-9" style="margin-top: 25px">
                <button @onclick="EditarNivelAsync" hidden="@(ArvoreSelected.Tipo == 1)" style="cursor: pointer; color: orange; width: 35px; height: 38px; border: 1px solid gray;"><span class="oi oi-pencil"></span></button>
                <button @onclick="ExcluirAsync" hidden="@(ArvoreSelected.Tipo == 1 || ArvorePossuiFilhos())" style="cursor: pointer; color: red; width: 35px; height: 38px; border: 1px solid gray;"><span class="oi oi-trash"></span></button>
                <button @onclick="@(async () => await AvancarRetrocederAsync(false))" hidden="@(ArvoreSelected.Tipo == 1 || ArvoreSelected.Ordem == 1)" style="cursor: pointer; color: blue; width: 35px; height: 38px; border: 1px solid gray;"><span class="oi oi-arrow-circle-top"></span></button>
                <button @onclick="@(async () => await AvancarRetrocederAsync(true))" hidden="@(ArvoreSelected.Tipo == 1 || ArvoreSelected.UltimoItem)" style="cursor: pointer; color: blue; width: 35px; height: 38px; border: 1px solid gray;"><span class="oi oi-arrow-circle-bottom"></span></button>

                <div hidden="@(ArvoreSelected.Tipo == 7)" class="dropdown show" style="float: left; padding-right: 5px" @onmouseout="@(() => focus = false)" @onmousemove="@(() => focus = true)">
                    <button @onclick="ShowAdd" @onblur="OnBlur" class="btn btn-info dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Adicionar
                    </button>

                    <div class="dropdown-menu @show" style="cursor: pointer" aria-labelledby="dropdownMenuLink">
                        <div @onclick="AddGrupoAsync" hidden="@(!(ArvoreSelected.Tipo == 1 || ArvoreSelected.Tipo == 3))" class="dropdown-item"><span class="oi oi-people"></span> Grupo</div>
                        <div @onclick="AddDepartamentoAsync" hidden="@(!(ArvoreSelected.Tipo == 3 || ArvoreSelected.Tipo == 4))" class="dropdown-item"><span class="oi oi-home"></span> Departamento</div>
                        <div @onclick="AddCargoAsync" hidden="@(!(ArvoreSelected.Tipo == 3 || ArvoreSelected.Tipo == 4))" class="dropdown-item"><span class="oi oi-spreadsheet"></span> Cargo</div>
                        <div @onclick="AddUsuarioAsync" hidden="@(ArvoreSelected.Tipo != 5)" class="dropdown-item"><span class="oi oi-person"></span> Usu√°rio</div>
                        <div @onclick="AddIndicadorAsync" hidden="@(ArvoreSelected.Tipo != 6)" class="dropdown-item"><span class="oi oi-dashboard"></span> Indicador</div>
                    </div>
                </div>

            </div>
        }
    </div>
</div>

<div style="width: auto">
		
	<div style="float:left; width: @(percentualWidthDiv1)%; overflow-x:auto; height: calc(100vh - 122px); background-color: white">

        @if (lkpProjeto?.GetValueOrNull() != null)
        {
            <div class="row" style="margin-left: 0px; margin-right: 0px">
                <div class="col-md-12" style="margin-left: -10px">
                    <RadzenTree Change="@OnChange" Data="@itens" Expand="@Expandir" Style="width: auto; height: auto">
                        <RadzenTreeLevel Text="@GetTextForNode" Template="@Template" Expanded="@(data =>  ((ProjetoEstruturaOrganizacionalArvore) data).Expanded)" Selected="@(data =>  ((ProjetoEstruturaOrganizacionalArvore) data).Selected)" />
                    </RadzenTree>
                </div>
            </div>
        }

	</div>
		
    @if (percentualWidthDiv2 == "60")
    {
        <div style="float:left; width: @(percentualWidthDiv2)%; overflow-x:auto; height: calc(100vh - 122px); background-color: #007bff">
            <div class="row" style="margin-top:20px; margin-left: 0px; margin-right: 0px">
                <div class="col-md-10 mx-auto">
                    <DataTable Data="data" Columns="columns" TItem="IndicadorCorporativo" CheckBoxProperty="Vinculado" Label="Indicadores corporativos" OnCheckBoxAsync="OnCheckBoxAsync" />
                </div>
            </div>
        </div>
    }
		
</div>

<Loader Visible="loaderVisible"/>

<NivelOrganizacionalLookup @ref="lkpNivelGrupo" Background="true" Tipo="1" OnChange="AddGrupoChangeAsync"/>
<NivelOrganizacionalLookup @ref="lkpNivelDepartamento" Background="true" Tipo="2" OnChange="AddDeparamentoChangeAsync"/>
<NivelOrganizacionalLookup @ref="lkpNivelCargo" Background="true" Tipo="3" OnChange="AddCargoChangeAsync"/>
<IndicadorLookup @ref="lkpIndicador" Background="true" OnChange="AddIndicadorChangeAsync"/>
<UsuarioLookup @ref="lkpUsuario" Background="true" OnChange="AddUsuarioChangeAsync"/>

@code
{
    private NivelOrganizacionalLookup lkpNivelGrupo;
    private UsuarioLookup lkpUsuario;
    private IndicadorLookup lkpIndicador;
    private NivelOrganizacionalLookup lkpNivelDepartamento;
    private NivelOrganizacionalLookup lkpNivelCargo;
    private IList<DataTable<IndicadorCorporativo>.Column> columns;
    private IList<IndicadorCorporativo> data;
    private bool focus;
    private string show = string.Empty;
    private bool inserirNivel;

    private async Task AddUsuarioChangeAsync()
    {
        if (inserirNivel)
        {
            await AddItemAsync(lkpUsuario.GetValue(), 6);
        }
        else
        {
            await UpdateItemAsync(lkpUsuario.GetValue());
        }
    }

    private async Task AddIndicadorChangeAsync()
    {
        if (inserirNivel)
        {
            await AddItemAsync(lkpIndicador.GetValue(), 7);
        }
        else
        {
            await UpdateItemAsync(lkpIndicador.GetValue());
        }
    }

    private async Task AddGrupoChangeAsync()
    {
        if (inserirNivel)
        {
            await AddItemAsync(lkpNivelGrupo.GetValue(), 3);
        }
        else
        {
            await UpdateItemAsync(lkpNivelGrupo.GetValue());
        }
    }

    private async Task AddDeparamentoChangeAsync()
    {
        if (inserirNivel)
        {
            await AddItemAsync(lkpNivelDepartamento.GetValue(), 4);
        }
        else
        {
            await UpdateItemAsync(lkpNivelDepartamento.GetValue());
        }
    }

    private async Task AddCargoChangeAsync()
    {
        if (inserirNivel)
        {
            await AddItemAsync(lkpNivelCargo.GetValue(), 5);
        }
        else
        {
            await UpdateItemAsync(lkpNivelCargo.GetValue());
        }
    }

    private async Task AddItemAsync(long idReferencia, int tipo)
    {
        var http = await httpService.GetHttpAsync();
        if (http != null)
        {
            SetVisibleLoader(true);
            try
            {
                itens = null;
                StateHasChanged();

                var arvore = new ArvoreAddUpdate 
                {
                    IdProjeto = lkpProjeto.GetValue(),
                    IdReferencia = idReferencia,
                    IdSuperior = ArvoreSelected.Id.Value,
                    Tipo = tipo
                };

                var response = await http.PostAsJsonAsync("projeto-estrutura-organizacional/adicionar-item", arvore);
                if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
                }

                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Registro adicionado com sucesso.", Duration = 5000 });
            }
            catch (Exception exc)
            {
                itens = null;
                Console.WriteLine(exc.Message);
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao gravar o registro.", Duration = 5000 });
            }
            ArvoreSelected = null;
            SetVisibleLoader(false);
            await ChangeProjectAsync();
        }
    }

    private async Task UpdateItemAsync(long idReferencia)
    {
        var http = await httpService.GetHttpAsync();
        if (http != null)
        {
            SetVisibleLoader(true);
            try
            {
                itens = null;
                StateHasChanged();

                var response = await http.GetAsync($"projeto-estrutura-organizacional/alterar-item/{ArvoreSelected.Id}/{idReferencia}/{ArvoreSelected.Tipo}");
                if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
                }

                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Registro alterado com sucesso.", Duration = 5000 });
            }
            catch (Exception exc)
            {
                itens = null;
                Console.WriteLine(exc.Message);
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao gravar o registro.", Duration = 5000 });
            }
            ArvoreSelected = null;
            SetVisibleLoader(false);
            await ChangeProjectAsync();
        }
    }

    private async Task AddUsuarioAsync()
    {
        inserirNivel = true;
        show = string.Empty;
        StateHasChanged();
        await lkpUsuario.PesquisarAsync();
    }

    private async Task AddIndicadorAsync()
    {
        inserirNivel = true;
        show = string.Empty;
        StateHasChanged();
        await lkpIndicador.PesquisarAsync();
    }

    private async Task AddGrupoAsync()
    {
        inserirNivel = true;
        show = string.Empty;
        StateHasChanged();
        await lkpNivelGrupo.PesquisarAsync();
    }

    private async Task AddDepartamentoAsync()
    {
        inserirNivel = true;
        show = string.Empty;
        StateHasChanged();
        await lkpNivelDepartamento.PesquisarAsync();
    }

    private async Task AddCargoAsync()
    {
        inserirNivel = true;
        show = string.Empty;
        StateHasChanged();
        await lkpNivelCargo.PesquisarAsync();
    }

    private async Task EditarNivelAsync()
    {
        inserirNivel = false;
        switch (ArvoreSelected.Tipo)
        {
            case 3: await lkpNivelGrupo.PesquisarAsync(); break;
            case 4: await lkpNivelDepartamento.PesquisarAsync(); break;
            case 5: await lkpNivelCargo.PesquisarAsync(); break;
            case 6: await lkpUsuario.PesquisarAsync(); break;
            case 7: await lkpIndicador.PesquisarAsync(); break;
        }
    }

    private bool ArvorePossuiFilhos()
    {
        if (ArvoreSelected == null)
        {
            return false;
        }

        return ArvoreSelected.Filhos != null && ArvoreSelected.Filhos.Any();
    }

    private void ShowAdd()
    {
        if (string.IsNullOrEmpty(show))
        {
            show = "show";
        }
        else
        {
            show = string.Empty;
        }
    }

    private void OnBlur()
    {
        if (!focus)
        {
            show = string.Empty;
        }
    }

    private async Task BuscarIndicadoresCorporativosAsync()
    {
        var http = await httpService.GetHttpAsync();
        if (http != null)
        {
            SetVisibleLoader(true);
            try
            {
                var response = await http.GetAsync($"projeto-estrutura-organizacional/obter-indicadores-corporativos/{lkpProjeto.GetValue()}");
                if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
                }

                data = await httpService.GetObjectAsync<IList<IndicadorCorporativo>>(response);
            }
            catch (Exception exc)
            {
                data = null;
                Console.WriteLine(exc.Message);
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao realizar a pesquisa.", Duration = 5000 });
            }
            SetVisibleLoader(false);
        }
    }

    private async Task ExcluirAsync()
    {
        var result = await js.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este registro.");
        if (result == false) return;
        var http = await httpService.GetHttpAsync();
        if (http != null)
        {
            SetVisibleLoader(true);
            try
            {
                itens = null;
                StateHasChanged();
                var response = await http.GetAsync($"projeto-estrutura-organizacional/exclui-item/{ArvoreSelected.Id}/{ArvoreSelected.IdSuperior.Value}/{lkpProjeto.GetValue()}");
                if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
                }

                itens = await httpService.GetObjectAsync<IList<ProjetoEstruturaOrganizacionalArvore>>(response);
            }
            catch (Exception exc)
            {
                itens = null;
                Console.WriteLine(exc.Message);
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao excluir o registro.", Duration = 5000 });
            }
            ArvoreSelected = null;
            SetVisibleLoader(false);
            await ChangeProjectAsync();
        }
    }

    private async Task AvancarRetrocederAsync(bool avancar)
    {
        var http = await httpService.GetHttpAsync();
        if (http != null)
        {
            SetVisibleLoader(true);
            try
            {
                itens = null;
                StateHasChanged();
                string metodo = avancar ? "avancar-nivel" : "retroceder-nivel";
                var response = await http.GetAsync($"projeto-estrutura-organizacional/{metodo}/{ArvoreSelected.Id}/{ArvoreSelected.IdSuperior.Value}/{lkpProjeto.GetValue()}");
                if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
                }

                itens = await httpService.GetObjectAsync<IList<ProjetoEstruturaOrganizacionalArvore>>(response);
            }
            catch (Exception exc)
            {
                itens = null;
                Console.WriteLine(exc.Message);
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao excluir o registro.", Duration = 5000 });
            }
            ArvoreSelected = null;
            SetVisibleLoader(false);
            await ChangeProjectAsync();
        }
    }

    private async Task OnCheckBoxAsync(IndicadorCorporativo indicadorCorporativo, bool value)
    {
        var http = await httpService.GetHttpAsync();
        if (http != null)
        {
            SetVisibleLoader(true);
            try
            {
                HttpResponseMessage response;
                
                if (value)
                {
                    var arvore = new ProjetoEstruturaOrganizacionalArvore { IdProjeto = lkpProjeto.GetValue(), Tipo = 2, IdIndicador = indicadorCorporativo.Id, Ordem = 1 };
                    response = await http.PostAsJsonAsync("projeto-estrutura-organizacional", arvore);
                }
                else
                {
                    response = await http.DeleteAsync($"projeto-estrutura-organizacional?id={indicadorCorporativo.IdProjetoEstruturaOrganizacional.Value}");
                }
                
                if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
                }

                if (value)
                {
                    indicadorCorporativo.IdProjetoEstruturaOrganizacional = long.Parse(response.Content.ReadAsStringAsync().Result);
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Indicador vinculado com sucesso.", Duration = 5000 });
                }
                else
                {
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Indicador desvinculado com sucesso.", Duration = 5000 });
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine(exc.Message);
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao realizar esta opera√ß√£o.", Duration = 5000 });
            }
            SetVisibleLoader(false);
            await BuscarIndicadoresCorporativosAsync();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        columns = new List<DataTable<IndicadorCorporativo>.Column>();
        columns.Add(new DataTable<IndicadorCorporativo>.Column
        {
            PropertyName = "Identificador",
            DisplayName = "Identificador"
        });
        columns.Add(new DataTable<IndicadorCorporativo>.Column
        {
            PropertyName = "Nome",
            DisplayName = "Nome"
        });
        columns.Add(new DataTable<IndicadorCorporativo>.Column
        {
            PropertyName = "_TipoCalculo",
            DisplayName = "Tipo de c√°lculo"
        });
        data = new List<IndicadorCorporativo>();
    }

    private ProjetoLookup lkpProjeto;
    private bool loaderVisible;
    private string percentualWidthDiv1 = "100";
    private string percentualWidthDiv2 = "0";
    
    private IList<ProjetoEstruturaOrganizacionalArvore> itens = new List<ProjetoEstruturaOrganizacionalArvore>();
    private ProjetoEstruturaOrganizacionalArvore ArvoreSelected = null;

    private void IndicadoresCorporativo()
    {
        if (ArvoreSelected.Tipo == 1)
        {
            percentualWidthDiv1 = "40";
            percentualWidthDiv2 = "60";
            Task.Run(async () => await BuscarIndicadoresCorporativosAsync());
        }
        else
        {
            percentualWidthDiv1 = "100";
            percentualWidthDiv2 = "0";
        }

        StateHasChanged();
    }

    private async Task ChangeProjectAsync()
    {
        if (lkpProjeto?.GetValueOrNull() != null)
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                SetVisibleLoader(true);
                try
                {
                    itens = null;
                    StateHasChanged();
                    var response = await http.GetAsync($"projeto-estrutura-organizacional/obter-arvore/{lkpProjeto.GetValue()}");
                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }
                    
                    itens = await httpService.GetObjectAsync<IList<ProjetoEstruturaOrganizacionalArvore>>(response);
                }
                catch (Exception exc)
                {
                    itens = new List<ProjetoEstruturaOrganizacionalArvore>();
                    Console.WriteLine(exc.Message);
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao realizar a pesquisa.", Duration = 5000 });
                }
                SetVisibleLoader(false);
            }
        }

        StateHasChanged();
    }

    private void SetVisibleLoader(bool visible)
    {
        loaderVisible = visible;
        StateHasChanged();
    }

    string GetTextForNode(object data)
    {
        var arv = (ProjetoEstruturaOrganizacionalArvore)data;
        return arv.Descricao;
    }

    void OnChange(Radzen.TreeEventArgs args)
    {
        ArvoreSelected = (ProjetoEstruturaOrganizacionalArvore) args.Value;
        ArvoreSelected.Expanded = true;
        ArvoreSelected.Selected = true;
        IndicadoresCorporativo();
    }

    void Expandir(Radzen.TreeExpandEventArgs args)
    {
        var arv = (ProjetoEstruturaOrganizacionalArvore)args.Value;
        args.Children.Data = arv.Filhos;
        args.Children.Text = GetTextForNode;
        args.Children.Template = Template;
        args.Children.Expanded = (i) => arv.Expanded;
        args.Children.Selected = (i) => arv.Selected;
        Task.Run(async () => await js.InvokeVoidAsync("deleteCaretArvore"));
    }

    RenderFragment<RadzenTreeItem> Template = (context) => builder =>
    {
        var arv = (ProjetoEstruturaOrganizacionalArvore)context.Value;

        builder.OpenComponent<RadzenIcon>(0);

        if (arv.Tipo == 1)
        {
            builder.AddAttribute(1, "Icon", "folder");
            builder.AddAttribute(2, "Style", "margin-left: 5px; padding-right: 5px; color: orange");
        }
        else if (arv.Tipo == 3)
        {
            builder.AddAttribute(1, "Icon", "group_work");
            builder.AddAttribute(2, "Style", "margin-left: 5px; padding-right: 5px; color: blue");
        }
        else if (arv.Tipo == 4)
        {
            builder.AddAttribute(1, "Icon", "chrome_reader_mode");
            builder.AddAttribute(2, "Style", "margin-left: 5px; padding-right: 5px; color: purple");
        }
        else if (arv.Tipo == 5)
        {
            builder.AddAttribute(1, "Icon", "assignment_ind");
            builder.AddAttribute(2, "Style", "margin-left: 5px; padding-right: 5px; color: green");
        }
        else if (arv.Tipo == 6)
        {
            builder.AddAttribute(1, "Icon", "account_circle");
            builder.AddAttribute(2, "Style", "margin-left: 5px; padding-right: 5px; color: black");
        }
        else
        {
            builder.AddAttribute(1, "Icon", "donut_large");
            builder.AddAttribute(2, "Style", "margin-left: 5px; padding-right: 5px; color: red");
        }

        if (arv.Filhos is null || !arv.Filhos.Any())
        {
            builder.AddAttribute(3, "id", $"DELETECARET_{arv.Id}");
        }
        else
        {
            builder.AddAttribute(3, "id", $"ARV_{arv.Id}");
        }
        
        builder.CloseComponent();
        builder.AddContent(4, context.Text);
    };

    public class ProjetoEstruturaOrganizacionalArvore
    {
        public long? Id { get; set; }

        public string Descricao { get; set; }

        public bool Expanded { get; set; }

        public bool Selected { get; set; }

        public long? IdSuperior { get; set; }

        public long? IdNivelOrganizacional { get; set; }

        public long? IdIndicador { get; set; }

        public long? IdUsuario { get; set; }

        public long IdProjeto { get; set; }

        public int Tipo { get; set; }

        public short Ordem { get; set; }

        public bool UltimoItem { get; set; }

        public IList<ProjetoEstruturaOrganizacionalArvore> Filhos { get; set; }
    }

    class IndicadorCorporativo
    {
        public long Id {get; set;}

        public long? IdProjetoEstruturaOrganizacional {get; set;}

        public string Identificador {get; set;}

        public string Nome {get; set;}

        public int TipoCalculo {get; set;}

        public bool Vinculado { get; set; }

        public string _TipoCalculo 
        {
            get
            {
                switch(TipoCalculo)
                {
                    case 1: return "N√£o calculado";
                    case 2: return "Somenta meta";
                    case 3: return "Somenta realizado";
                    case 4: return "Meta e realizado calculados";
                    default: throw new Exception("Tipo de c√°lculo inv√°lido.");
                }
            }
        }
    }

    public class ArvoreAddUpdate
    {
        public long? Id { get; set; }

        public long IdProjeto { get; set; }

        public int Tipo { get; set; }

        public long IdReferencia { get; set; }

        public long IdSuperior { get; set; }
    }

}