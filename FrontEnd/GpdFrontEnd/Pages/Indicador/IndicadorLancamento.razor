@page "/indicador-lancamento"
@using GpdFrontEnd.Components.Lookups.Projeto
@using GpdFrontEnd.Components.Lookups.Indicador
@inject GpdFrontEnd.Services.System.HttpService httpService
@inject NotificationService notificationService
@inject IJSRuntime js

<nav class="navbar navbar-default navbar-fixed-top" style="height:56px; background-image: linear-gradient(180deg, #b0d2f7 100%, #007bff 0%); justify-content:center">
    <button hidden="@(!FormValid())" @onclick="SalvarAsync" class="btn btn-success" style="width:120px; border-radius:0px"><span class="oi oi-circle-check"></span> Salvar</button>
    &nbsp;&nbsp;
    <button hidden="@(!Id.HasValue)" class="btn btn-danger" @onclick="ExcluirAsync"><span class="oi oi-trash"></span> Excluir</button>
</nav>

<div class="card">
    @if (FormValid())
    {
        <div class="card-header"><h5>Formulário de lançamento de indicador (modo: @(Id.HasValue ? "visualização/edição" : "inserção"))</h5></div>
    }
    else
    {
        <div class="card-header"><h5>Formulário de lançamento de indicador (modo: consulta)</h5></div>
    }
    <div class="card-body">

        <div class="row">
            <div class="col-md-6">
                <ProjetoLookup @ref="lkpProjeto" Label="Projeto" PlaceHolder="Selecione um projeto" Required="true" OnChange="BuscarRegistroAsync"/>
            </div>

            <div class="col-md-6">
                <IndicadorLookup @ref="lkpIndicador" Label="Indicador" PlaceHolder="Selecione um indicador" Required="true" OnChange="BuscarRegistroAsync"/>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <SelectOption @ref="SelAno" Label="Ano" Required="true" AllowInvalidOption="true" Options="optionsAno"  OnSelect="OnSelectAsync"/>
            </div>

            <div class="col-md-6">
                <SelectOption @ref="SelMes" Label="Mês" Required="true" AllowInvalidOption="true" Options="optionsMes"  OnSelect="OnSelectAsync"/>
            </div>
        </div>

        <div class="row" hidden="@(!FormValid())">
            <div class="col-md-6">
                <TextValue @ref="TxValorMeta" AllowNegative="true" Label="Valor da meta" Required="true" MinValue="-99999999999999999.99m" MaxValue="99999999999999999.99m"  />
            </div>

            <div class="col-md-6">
                <TextValue @ref="TxValorRealizado" AllowNegative="true" Label="Valor do realizado" Required="true" MinValue="-99999999999999999.99m" MaxValue="99999999999999999.99m"  />
            </div>
        </div>

    </div>
</div>

<Loader Visible="loaderVisible"/>

@code
{
    private long? Id;
    private ProjetoLookup lkpProjeto;
    private IndicadorLookup lkpIndicador;
    private bool loaderVisible;
    private SelectOption SelAno;
    private SelectOption SelMes;
    private TextValue TxValorMeta;
    private TextValue TxValorRealizado;
    private Dictionary<long, string> optionsAno;
    private Dictionary<long, string> optionsMes;

    private bool FormValid()
    {
        if (lkpProjeto is null || lkpIndicador is null || SelAno is null || SelMes is null)
        {
            return false;
        }

        return lkpProjeto.Valid && lkpIndicador.Valid && SelAno.Valid && SelMes.Valid;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        optionsAno = new Dictionary<long, string>();
        for (int ano = 2000; ano < (DateTime.Now.Year + 20); ano++)
        {
            optionsAno.Add(ano, ano.ToString());
        }
        optionsMes = new Dictionary<long, string>();
        optionsMes.Add(1, "Janeiro");
        optionsMes.Add(2, "Fevereiro");
        optionsMes.Add(3, "Março");
        optionsMes.Add(4, "Abril");
        optionsMes.Add(5, "Maio");
        optionsMes.Add(6, "Junho");
        optionsMes.Add(7, "Julho");
        optionsMes.Add(8, "Agosto");
        optionsMes.Add(9, "Setembro");
        optionsMes.Add(10, "Outubro");
        optionsMes.Add(11, "Novembro");
        optionsMes.Add(12, "Dezembro");
    }

    private async Task OnSelectAsync(long value)
    {
        await BuscarRegistroAsync();
    }

    private async Task BuscarRegistroAsync()
    {
        Id = null;
        TxValorMeta.Clear();
        TxValorRealizado.Clear();

        if (lkpIndicador.TipoCalculo == 4)
        {
            TxValorMeta.Disable(true, 0.00m);
            TxValorRealizado.Disable(true, 0.00m);
        }
        else if (lkpIndicador.TipoCalculo == 3)
        {
            TxValorMeta.Disable(true, 0.00m);
            TxValorRealizado.Disable(false);
        }
        else if (lkpIndicador.TipoCalculo == 2)
        {
            TxValorMeta.Disable(false);
            TxValorRealizado.Disable(true, 0.00m);
        }
        else
        {
            TxValorMeta.Disable(false);
            TxValorRealizado.Disable(false);
        }

        if (FormValid())
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                SetVisibleLoader(true);
                try
                {
                    string expression = System.Web.HttpUtility.UrlEncode($"IdProjeto == {lkpProjeto.GetValue()} && IdIndicador == {lkpIndicador.GetValue()} && Ano == {SelAno.GetValue()} && Mes == {SelMes.GetValue()}");
                    var response = await http.GetAsync($"indicador-lancamento?filter={expression}&page=0&limit=1");

                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }

                    var result = await httpService.GetResultSetAsync<IndicadorLancamentoDto>(response);
                    if (result.Data.Any())
                    {
                        var first = result.Data[0];
                        Id = first.Id;
                        TxValorMeta.SetValue(first.ValorMeta);
                        TxValorRealizado.SetValue(first.ValorRealizado);
                    }
                }
                catch (Exception exc)
                {
                    Console.WriteLine(exc.Message);
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao salvar os dados.", Duration = 5000 });
                }
                SetVisibleLoader(false);
            }
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task SalvarAsync()
    {
        if (TxValorMeta.Valid && TxValorRealizado.Valid)
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                SetVisibleLoader(true);
                try
                {
                    var indicadorLancamento = new IndicadorLancamentoDto
                    {
                        IdProjeto = lkpProjeto.GetValue(),
                        IdIndicador = lkpIndicador.GetValue(),
                        Ano = SelAno.GetValue(),
                        Mes = SelMes.GetValue(),
                        ValorMeta = TxValorMeta.GetValue(),
                        ValorRealizado = TxValorRealizado.GetValue()
                    };

                    System.Net.Http.HttpResponseMessage response;
                    string message;
                    if (Id.HasValue)
                    {
                        indicadorLancamento.Id = Id;
                        response = await http.PutAsJsonAsync("indicador-lancamento", indicadorLancamento);
                        message = "Registro atualizado com sucesso";
                    }
                    else
                    {
                        response = await http.PostAsJsonAsync("indicador-lancamento", indicadorLancamento);
                        message = "Registro inserido com sucesso";
                    }

                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }
                    else if (!Id.HasValue)
                    {
                        Id = long.Parse(response.Content.ReadAsStringAsync().Result);
                    }

                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = message, Duration = 5000 });
                }
                catch (Exception exc)
                {
                    Console.WriteLine(exc.Message);

                    if (exc.Message.Contains("UkIndicadorLancamento"))
                    {
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Alerta", Detail = "Este projeto, indicador, ano e mês já estão sendo utilizados em outro registro.", Duration = 5000 });
                    }
                    else
                    {
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao salvar os dados.", Duration = 5000 });
                    }
                }

                SetVisibleLoader(false);
            }
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Alerta", Detail = "Existem campos que precisam ser preenchidos ou corrigidos.", Duration = 6000 });
        }
    }

    private void SetVisibleLoader(bool visible)
    {
        loaderVisible = visible;
        StateHasChanged();
    }

    private async Task ExcluirAsync()
    {
        var result = await js.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este registro.");
        if (result == true)
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                SetVisibleLoader(true);
                try
                {
                    var response = await http.DeleteAsync($"indicador-lancamento?id={Id}");
                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }

                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Registro excluído com sucesso.", Duration = 5000 });
                    Limpar();
                }
                catch (Exception exc)
                {
                    Console.WriteLine(exc.Message);
                    if (exc.Message.Contains("BusinessException"))
                    {
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = exc.Message.Split('|')[0], Duration = 7000 });
                    }
                    else
                    {
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao excluir o registro.\nVerifique se este registro possui dependências.", Duration = 7000 });
                    }
                }
                SetVisibleLoader(false);
            }
        } 
    }

    private void Limpar()
    {
        Id = null;
        lkpProjeto.Clear();
        lkpIndicador.Clear();
        SelAno.Clear();
        SelMes.Clear();
        TxValorMeta.Clear();
        TxValorRealizado.Clear();
    }

    class IndicadorLancamentoDto
    {
        public long? Id { get; set; }
        public long IdProjeto { get; set; }
        public long IdIndicador { get; set; }
        public long Ano { get; set; }
        public long Mes { get; set; }
        public decimal ValorMeta { get; set; }
        public decimal ValorRealizado { get; set; }
    }
}
