<div class="form-group">
    <label>CPF (Apenas números)</label>
    <div class="input-group">
        <input type="text" class="form-control" @bind-value="textValue" maxlength="14" @onkeypress="KeyPress" @onkeypress:preventDefault="blockDigit" @onkeypress:stopPropagation="blockDigit" 
               @bind-value:event="oninput" style="border: 1px solid @(Valid ? "#ced4da" : "#F7819F"); background-color: @(Valid ? "white" : "#F6CED8")"
               @onblur="Leave" @onkeyup="KeyUp" onpaste="return false" readonly="@ReadOnly" disabled="@Disabled" placeholder="insira o CPF" />

    </div>
    <small class="form-text text-muted" style="color:red !important" hidden="@Valid">@message</small>
</div>

    @code {

        private string oldValue;
        private string textValue = string.Empty;

        [Parameter]
        public string Value
        {
            set
            {
                if (value != null && oldValue != OldValue(value))
                {
                    textValue = value;
                    oldValue = textValue;
                    Leave();
                }
            }
        }

        private string OldValue(string value)
        {
            if (value != null)
            {
                return value;
            }

            return string.Empty;
        }

        [Parameter]
        public bool Required { get; set; }

        public bool Valid { get; private set; }

        [Parameter]
        public bool ReadOnly { get; set; }

        [Parameter]
        public bool Disabled { get; set; }

        private string message;

        private bool blockDigit;

        public string GetValue() => textValue.Replace(".", string.Empty).Replace("-", string.Empty);

        public string GetValueOrNull() => textValue != null ? GetValue() : null;

        private void KeyPress(KeyboardEventArgs keyboardEventArgs) => blockDigit = !Char.IsDigit(keyboardEventArgs.Key[0]);

        private void Leave() 
        {
            if (textValue.Replace(".", string.Empty).Replace("-", string.Empty).Length == 11)
            {
                textValue = textValue.Replace(".", string.Empty).Replace("-", string.Empty);
                textValue = textValue.Substring(0, 3) + "." + textValue.Substring(3, 3) + "." + textValue.Substring(6, 3) + "-" + textValue.Substring(9, 2);
            }

            ValidState();
        }
         

        private void KeyUp()
        {
            if (Disabled || ReadOnly)
            {
                return;
            }

            Leave();
        }

        private void ValidState()
        {
            Valid = true;

            if (Required && string.IsNullOrEmpty(textValue))
            {
                Valid = false;
                message = "Este campo deve ser informado obrigatóriamente.";
                StateHasChanged();
                return;
            }

            if (!string.IsNullOrEmpty(textValue) && textValue.Replace(".", string.Empty).Replace("-", string.Empty).Length != 11)
            {
                Valid = false;
                message = "O CPF deve ter 11 dígitos.";
                StateHasChanged();
                return;
            }

            if (!string.IsNullOrEmpty(textValue) && !ValidarCpf(textValue))
            {
                Valid = false;
                message = "O CPF não é válido.";
                StateHasChanged();
                return;
            }
        }


        private bool ValidarCpf(string cpf)
        {
            cpf = cpf.Replace(".", string.Empty).Replace("-", string.Empty);
            if (cpf.Length != 11)
            {
                return false;
            }

            int[] multiplicador1 = new int[9] { 10, 9, 8, 7, 6, 5, 4, 3, 2 };
            int[] multiplicador2 = new int[10] { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 };
            string tempCpf;
            string digito;
            int soma;
            int resto;
            tempCpf = cpf.Substring(0, 9);
            soma = 0;

            for (int i = 0; i < 9; i++)
                soma += int.Parse(tempCpf[i].ToString()) * multiplicador1[i];
            resto = soma % 11;
            if (resto < 2)
                resto = 0;
            else
                resto = 11 - resto;
            digito = resto.ToString();
            tempCpf = tempCpf + digito;
            soma = 0;
            for (int i = 0; i < 10; i++)
                soma += int.Parse(tempCpf[i].ToString()) * multiplicador2[i];
            resto = soma % 11;
            if (resto < 2)
                resto = 0;
            else
                resto = 11 - resto;
            digito = digito + resto.ToString();
            return cpf.EndsWith(digito);
        }

        protected override void OnAfterRender(bool firstRender)
        {
            if (firstRender)
            {
                ValidState();
            }

            base.OnAfterRender(firstRender);
        }
    }
