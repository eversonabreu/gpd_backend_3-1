@inject IModalService Modal
@inject GpdFrontEnd.Services.System.HttpService httpService
@using System.Text.Json
@inject NotificationService notificationService

<div class="form-group" hidden="@Background">
    <label>@Label</label>
    <div class="input-group">
        <input type="text" @bind="identificador" class="form-control" readonly="@Readonly" disabled="@(true)" placeholder="@PlaceHolder" style="border-right:0px; background-color:#dedede; border: 1px solid @(Valid ? "#ced4da" : "#F7819F");" />
        <div class="input-group-prepend">
            <div class="input-group-text" style="padding-left: 0px; padding-right: 2px; padding-bottom: 0px;">
                <button hidden="@Readonly" @onclick="Limpar" class="btn btn-default" style="cursor: pointer; margin-top: -7px; width: 35px; height: 37px; border-radius: 0px; margin-right: -2px;">
                    <span class="oi oi-delete" style="margin-left:-3px; margin-top:3px;"></span>
                </button>
            </div>
        </div>
        <div class="input-group-prepend">
            <div class="input-group-text" style="padding-left: 0px; padding-right: 2px; padding-bottom: 0px;">
                <button hidden="@Readonly" @onclick="PesquisarAsync" class="btn btn-default" style="cursor: pointer; margin-top: -7px; width: 35px; height: 37px; border-radius: 0px; margin-right: -2px;">
                    <span class="oi oi-magnifying-glass" style="margin-left:-3px; margin-top:3px;"></span>
                </button>
            </div>
        </div>
    </div>
    <small class="form-text text-muted" style="color:red !important" hidden="@Valid">@message</small>
</div>

@code
{
    private string oldValue;
    private string textValue = string.Empty;

    private string identificador;

    [Parameter]
    public long? Value
    {
        set
        {
            if (value.HasValue && oldValue != OldValue(value))
            {
                textValue = value.Value.ToString();
                oldValue = textValue;
            }
        }
    }

    public async Task BuscarIndicadorAsync()
    {
        if (textValue != "0")
        {
            var http = await httpService.GetHttpAsync();
            if (http != null)
            {
                try
                {
                    long id = long.Parse(textValue);
                    var response = await http.GetAsync($"indicador/id/{id}");
                    if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                    {
                        throw new Exception(response.Content.ReadAsStringAsync().Result);
                    }
                    var content = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<IndicadorLookupView.IndicadorLookupClass>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    identificador = result.Identificador;
                    TipoCalculo = result.TipoCalculo;
                    textValue = result.Id.ToString();
                }
                catch (Exception exc)
                {
                    Console.WriteLine(exc.Message);
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Um erro aconteceu ao realizar a pesquisa. (Lookup de nível organizacional)", Duration = 5000 });
                }
            }
        }

        ValidState();
    }

    private string OldValue(long? value)
    {
       if (value.HasValue)
       {
            return value.Value.ToString();
       }

       return string.Empty;
    }
        
    private string message;

    public bool Valid;

    public int TipoCalculo;

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool Background { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public Func<Task> OnChange { get; set; }

    public async Task PesquisarAsync()
    {
       var options = new ModalOptions()
       {
           DisableBackgroundCancel = true,
           Position = Blazored.Modal.ModalPosition.Center
       };

       var lookup = Modal.Show<IndicadorLookupView>("Consulta de indicador", options);
       var result = await lookup.Result;
       if (!result.Cancelled)
       {
         var indicador = ((IndicadorLookupView.IndicadorLookupClass) result.Data);
         identificador = indicador.Identificador;
         textValue = indicador.Id.ToString();
         TipoCalculo = indicador.TipoCalculo;
         ValidState();
       }
    }

    private void Limpar()
    {
        identificador = string.Empty;
        textValue = null;
        TipoCalculo = 0;
        ValidState();
    }

    private void ValidState()
    {
        Valid = true;

        if (Required && (string.IsNullOrWhiteSpace(textValue) || textValue == "0"))
        {
            Valid = false;
            message = "Este campo deve ser informado obrigatóriamente.";
        }

        StateHasChanged();
        OnChange?.Invoke();
    }

    public long GetValue() => textValue == "0" ? throw new Exception("Nível organizacional inválido.") : long.Parse(textValue);

    public long? GetValueOrNull() => (string.IsNullOrWhiteSpace(textValue) || textValue == "0") ? null : (long?) GetValue();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ValidState();
        }

        base.OnAfterRender(firstRender);
    }

    public void Clear()
    {
        textValue = string.Empty;
        identificador = string.Empty;
        TipoCalculo = 0;
        ValidState();
    }
}